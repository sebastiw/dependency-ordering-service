* Dependency Ordering Service

Given a list of tasks or dependencies, this service will order the
list in execution order.

Example

#+BEGIN_SRC bash
$ curl -s "http://localhost:8000/order" \
    --header "Content-Type: Application/json" \
    --data '@-' << END | jq .
  {
    "tasks":[
      {
        "name":"task-1",
        "command":"touch /tmp/file1"
      },
      {
        "name":"task-2",
        "command":"cat /tmp/file1",
        "requires":[
          "task-3"
        ]
      },
      {
        "name":"task-3",
        "command":"echo 'Hello World!' > /tmp/file1",
        "requires":[
          "task-1"
        ]
      },
      {
        "name":"task-4",
        "command":"rm /tmp/file1",
        "requires":[
          "task-2",
          "task-3"
        ]
      }
    ]
  }
END
[
  {
    "command": "touch /tmp/file1",
    "name": "task-1"
  },
  {
    "command": "echo 'Hello World!' > /tmp/file1",
    "name": "task-3"
  },
  {
    "command": "cat /tmp/file1",
    "name": "task-2"
  },
  {
    "command": "rm /tmp/file1",
    "name": "task-4"
  }
]
#+END_SRC

With an optional flag (`?format=bash`) the service will return a bash
script compatible format.

#+BEGIN_SRC bash
$ curl -s "http://localhost:8000/order?format=bash" \
    --header "Content-Type: Application/json" \
    --data '@-' << END
  {
    "tasks":[
      {
        "name":"task-1",
        "command":"touch /tmp/file1"
      },
      {
        "name":"task-2",
        "command":"cat /tmp/file1",
        "requires":[
          "task-3"
        ]
      },
      {
        "name":"task-3",
        "command":"echo 'Hello World!' > /tmp/file1",
        "requires":[
          "task-1"
        ]
      },
      {
        "name":"task-4",
        "command":"rm /tmp/file1",
        "requires":[
          "task-2",
          "task-3"
        ]
      }
    ]
  }
END
#!/usr/bin/env bash

touch /tmp/file1
echo 'Hello World!' > /tmp/file1
cat /tmp/file1
rm /tmp/file1
#+END_SRC

** Endpoints

#+BEGIN_SRC curl
  http://localhost:8000/order
  http://localhost:8000/metrics
#+END_SRC

** TODO Future work
   - [ ] Tune proper tests
   - [X] Add logging
   - [ ] Eunit for known failed test cases
   - [X] Dockerfile
   - [X] Licence file
   - [ ] Add documentation (edocs)
   - [ ] REST is sooo 2000, let's do GraphQL
   - [ ] Setup CI
   - [ ] Add heartbeat/status endpoint
